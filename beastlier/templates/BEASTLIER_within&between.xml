<beast version='2.0'
    namespace='beast.app.beauti
    :beast.core
    :beast.evolution.branchratemodel
    :beast.evolution.speciation
    :beast.evolution.tree.coalescent
    :beast.core.util
    :beast.evolution.nuc
    :beast.evolution.operators
    :beast.evolution.sitemodel
    :beast.evolution.substitutionmodel
    :beast.evolution.likelihood
    :beast.evolution.tree.partitioned
    :beast.evolution
    :beast.math.distributions
    :beastlier.outbreak'
    templateinfo='Template for BEASTLIER transmission tree analyses with within-host models'>

       <map name='connect' reserved='true'>beast.app.beauti.BeautiConnector</map>
       <map name='subtemplate' reserved='true'>beast.app.beauti.BeautiSubTemplate</map>
       <map name='Uniform'>beast.math.distributions.Uniform</map>
       <map name='Normal'>beast.math.distributions.Normal</map>
       <map name='OneOnX'>beast.math.distributions.OneOnX</map>
       <map name='LogNormal'>beast.math.distributions.LogNormalDistributionModel</map>
       <map name='Exponential'>beast.math.distributions.Exponential</map>
       <map name='Gamma'>beast.math.distributions.Gamma</map>
       <map name='Beta'>beast.math.distributions.Beta</map>
       <map name='LaplaceDistribution'>beast.math.distributions.LaplaceDistribution</map>
       <map name='InverseGamma'>beast.math.distributions.InverseGamma</map>
       <map name='prior'>beast.math.distributions.Prior</map>

       <beauticonfig spec='BeautiConfig'
           inputLabelMap='beast.core.MCMC.operator=Operators,
                          beast.core.MCMC.logger=Loggers,
                          beast.evolution.sitemodel.SiteModel.mutationRate =Substitution Rate'
           inlinePlugins='beast.core.MCMC.distribution,
                          beast.evolution.sitemodel.SiteModel.substModel,
                          beast.evolution.tree.coalescent.ExponentialGrowth,
                          beast.evolution.tree.coalescent.ConstantPopulation,
                          beast.evolution.tree.coalescent.LogisticGrowthN0,
                          beast.evolution.tree.coalescent.Coalescent,
                          beast.evolution.tree.partitioned.WithinHostCoalescent,
                          beast.evolution.tree.partitioned.IndividualSEIR,
                          beast.core.State.stateNode,
                          beast.evolution.tree.EpidemiologicalPartitionedTree'
           collapsedPlugins='beast.core.MCMC.logger'
           suppressPlugins='beast.core.MCMC.operator,
                            beast.core.MCMC.operatorschedule,
                            beast.evolution.tree.coalescent.Coalescent.treeIntervals,
                            beast.evolution.tree.coalescent.Coalescent.tree,
                            beast.evolution.tree.partitioned.WithinHostCoalescent.forestIntervals,
                            beast.evolution.tree.partitioned.WithinHostCoalescent.restOfPopFunction,
                            beast.evolution.tree.partitioned.WithinHostCoalescent.enforceCoalescence,
                            beast.evolution.tree.partitioned.WithinHostCoalescent.outbreak,
                            beast.evolution.tree.partitioned.WithinHostCoalescent.tree,
                            beast.evolution.tree.partitioned.WithinHostCoalescent.treeIntervals,
                            beast.evolution.tree.partitioned.IndividualSEIR.outbreak,
                            beast.evolution.tree.partitioned.IndividualSEIR.tree,
                            beast.evolution.tree.partitioned.IndividualSEIR.infectiousCategorySet,
                            beast.evolution.tree.partitioned.IndividualSEIR.latentCategorySet,
                            beast.evolution.tree.partitioned.IndividualSEIR.treeIntervals,
                            beast.core.MCMC.state,
                            beast.core.MCMC.distribution,
                            beast.core.MCMC.init,
                            beast.evolution.speciation.BirthDeathGernhard08Model.treeIntervals,
                            beast.evolution.speciation.BirthDeathGernhard08Model.tree,
                            beast.evolution.speciation.BirthDeathGernhard08Model.sampleProbability,
                            beast.evolution.speciation.YuleModel.treeIntervals,
                            beast.evolution.speciation.YuleModel.useTipDates,
                            beast.evolution.speciation.YuleModel.tree,
                            beast.evolution.tree.Tree,
                            beast.evolution.tree.Tree.trait,
                            beast.evolution.tree.Tree.taxa,
                            beast.evolution.tree.Tree.taxonset,
                            beast.evolution.tree.RandomTree.trait,
                            beast.evolution.tree.RandomTree.initial,
                            beast.evolution.tree.RandomTree.taxa,
                            beast.evolution.tree.RandomTree.taxonset,
                            beast.evolution.tree.RandomTree.estimate,
                            beast.util.TreeParser.initial,
                            beast.util.TreeParser.taxa,
                            beast.util.TreeParser.taxonset,
                            beast.util.TreeParser.trait,
                            beast.util.TreeParser.estimate,
                            beast.util.ClusterTree.initial,
                            beast.util.ClusterTree.taxa,
                            beast.util.ClusterTree.taxonset,
                            beast.util.ClusterTree.trait,
                            beast.util.ClusterTree.estimate,
                            beast.evolution.substitutionmodel.WAG.rates,
                            beast.evolution.substitutionmodel.WAG.frequencies,
                            beast.evolution.substitutionmodel.JTT.rates,
                            beast.evolution.substitutionmodel.JTT.frequencies,
                            beast.evolution.substitutionmodel.Blosum62.rates,
                            beast.evolution.substitutionmodel.Blosum62.frequencies,
                            beast.evolution.substitutionmodel.Dayhoff.rates,
                            beast.evolution.substitutionmodel.Dayhoff.frequencies,
                            beast.evolution.substitutionmodel.CPREV.rates,
                            beast.evolution.substitutionmodel.CPREV.frequencies,
                            beast.evolution.substitutionmodel.MTREV.rates,
                            beast.evolution.substitutionmodel.MTREV.frequencies,
                            beast.evolution.substitutionmodel.GTR.rates,
                            beast.evolution.substitutionmodel.JukesCantor.frequencies,
                            beast.math.distributions.Prior.x,
                            beast.math.distributions.MRCAPrior.tree,
                            beast.math.distributions.MRCAPrior.monophyletic,
                            beast.math.distributions.MRCAPrior.taxonset,
                            beast.evolution.branchratemodel.UCRelaxedClockModel.tree,
                            beast.evolution.branchratemodel.UCRelaxedClockModel.rateCategories,
                            beast.evolution.branchratemodel.UCRelaxedClockModel.distr,
                            beast.evolution.branchratemodel.RandomLocalClockModel.tree,
                            beast.evolution.branchratemodel.RandomLocalClockModel.meanRate,
                            beast.evolution.branchratemodel.RandomLocalClockModel.indicators,
                            beast.evolution.operators.ScaleOperator.indicator,
                            beast.core.Operator.weight,
                            beast.core.Logger.model,
                            beast.evolution.tree.coalescent.BayesianSkyline.treeIntervals,
                            beast.evolution.tree.coalescent.BayesianSkyline.groupSizes,
                            beast.evolution.tree.coalescent.BayesianSkyline.popSizes,
                            beast.evolution.speciation.YuleModel.originHeight'
                            >

        <panel spec='BeautiPanelConfig' panelname="Partitions" tiptext="Data Partitions"
            path='distribution/distribution[id="likelihood"]/distribution/data'
            hasPartitions="none" icon='2220.png.x' forceExpansion='FALSE'
            type='beast.evolution.alignment.Alignment'
            />

        <panel spec='BeautiPanelConfig' panelname="Case Data" tiptext="Load or input epidemiological data for each clinical case and noninfected susceptible"
               path='state/stateNode[type="beast.evolution.tree.EpidemiologicalPartitionedTree"]/outbreak'
               hasPartitions="none" icon='2.png.x' forceExpansion='TRUE'
               isVisible='true'
               type="beastlier.outbreak.Outbreak"
        />

		<panel spec='BeautiPanelConfig' panelname="Tip Dates" tiptext="Specify times at which taxa were sampled"
            path='tree'
            hasPartitions="Tree" icon='2.png.x' forceExpansion='TRUE'
            isVisible='true'
        />

        <panel spec='BeautiPanelConfig' panelname="Tip Cases" tiptext="Specify clinical cases from which taxa were sampled"
               path='tree/elementTrait'
               hasPartitions="Tree" icon='2.png.x' forceExpansion='TRUE'
               isVisible='true'
        />

        <panel spec='BeautiPanelConfig' panelname="Latent periods" tiptext="Specify the category of latent period to which each case belongs"
               path='distribution/distribution[id="prior"]/distribution[type="beast.evolution.tree.partitioned.IndividualSEIR"]/latentCategorySet'
               hasPartitions="none" icon='2.png.x' forceExpansion='TRUE_START_COLLAPSED'
               isVisible='false'
        />

        <panel spec='BeautiPanelConfig' panelname="Infectious periods" tiptext="Specify the category of infectious period to which each case belongs"
               path='distribution/distribution[id="prior"]/distribution[type="beast.evolution.tree.partitioned.IndividualSEIR"]/infectiousCategorySet'
               hasPartitions="none" icon='2.png.x' forceExpansion='TRUE_START_COLLAPSED'
               isVisible='false'
        />

        <panel spec='BeautiPanelConfig' panelname="Site Model" tiptext="Site model and substitution model specifications"
            path='siteModel'
            hasPartitions="SiteModel" icon='3.png.x' forceExpansion='TRUE'
            />

        <panel spec='BeautiPanelConfig' panelname="Clock Model" tiptext="Clock model"
            path='branchRateModel'
            hasPartitions="ClockModel" icon='4.png.x' forceExpansion='TRUE'
        />

        <panel spec='BeautiPanelConfig' panelname="Priors" tiptext="Other priors"
            path='distribution/distribution[id="prior"]/distribution'
            hasPartitions="none" icon='7.png.x' forceExpansion='TRUE_START_COLLAPSED'
            type='beast.core.Distribution'
        />

        <panel spec='BeautiPanelConfig' panelname="Operators" tiptext="MCMC Operator details"
            path='operator'
            hasPartitions="none" icon='8.png.x' forceExpansion='TRUE_START_COLLAPSED'
            isVisible='false' buttonStatus='ADD_ONLY'
        />

		<panel spec='BeautiPanelConfig' panelname="MCMC" tiptext="MCMC parameters"
            path=''
            hasPartitions="none" icon='9.png.x' forceExpansion='TRUE'
            />

		<alignmentProvider id="Add Alignment" spec='BeautiAlignmentProvider' template='@DidelotPartitionTemplate'/>

        <partitiontemplate id='DidelotPartitionTemplate' spec='beast.app.beauti.BeautiSubTemplate' class='beast.evolution.likelihood.TreeLikelihood' mainid='mcmc'>
<![CDATA[

            <!-- Partitioned tree -->

            <plugin spec='beast.evolution.tree.EpidemiologicalPartitionedTree' id='Tree.t:$(n)' estimate='true'>
                <q id="q" spec="parameter.RealParameter" dimension="2" value="0.999" upper="1" lower="0"/>
                <rootBranchLength id="rootBranchLength" spec="parameter.RealParameter" dimension="1" value="14" estimate="false"/>
                <taxonset spec='beast.evolution.alignment.TaxonSet'>
                    <alignment idref='data'/>
                </taxonset>
                <outbreak spec='beastlier.outbreak.Outbreak' id="outbreak"/>
            </plugin>

            <!-- Tree likelihood -->

            <plugin spec='TreeLikelihood' id="treeLikelihood.$(n)">
                <data idref="data"/>
                <tree idref="Tree.t:$(n)"/>
                <siteModel spec='SiteModel' id="SiteModel.s:$(n)" gammaCategoryCount='0'>
                    <proportionInvariant spec='parameter.RealParameter' id='proportionInvariant.s:$(n)' value='0.0' lower='0' upper='1' estimate='false'/>
                    <mutationRate spec='parameter.RealParameter' id='mutationRate.s:$(n)' value='1.0' estimate='false'/>
                    <shape spec='parameter.RealParameter' id='gammaShape.s:$(n)' value='1.0' estimate='false'/>
                </siteModel>
               <branchRateModel spec='StrictClockModel' id='StrictClock.c:$(n)'>
                    <clock.rate id='clockRate.c:$(n)' spec='parameter.RealParameter' value='1.0' estimate='false'/>
                </branchRateModel>
            </plugin>

            <!-- Parameter priors -->

            <prior id='ClockPrior.c:$(n)' x='@clockRate.c:$(n)'>
                <distr spec="beast.math.distributions.Uniform" upper='Infinity'/>
            </prior>

            <prior id='MutationRatePrior.s:$(n)' x='@mutationRate.s:$(n)'>
                <distr spec="beast.math.distributions.OneOnX"/>
            </prior>

            <prior id='GammaShapePrior.s:$(n)' x='@gammaShape.s:$(n)'>
                <distr spec="beast.math.distributions.Exponential" mean='1'/>
            </prior>

            <prior id='PropInvariantPrior.s:$(n)' x='@proportionInvariant.s:$(n)'>
                <distr spec="beast.math.distributions.Uniform" lower='0' upper='1'/>
            </prior>

            <!-- default WH tree prior -->
            <distribution id="WHCoalescentLogisticH2015.t:$(n)" spec="beast.evolution.tree.partitioned.WithinHostCoalescent" enforceCoalescence="true">
                <forestIntervals spec='ForestIntervals' id='ForestIntervals.t:$(n)' tree='@Tree.t:$(n)' darkAreas="false"/>
                <populationFunction spec="beast.evolution.tree.coalescent.LogisticGrowthN0" id="H2015LogisticGrowthN0.t:$(n)">
                    <parameter name="popSize" id="lhPopSize.t:$(n)" value='0.1' estimate='false'/>
                    <parameter name="growthRate" id="lhGrowthRate.t:$(n)" value='1' estimate='true'/>
                    <parameter name="t50" id="lhT50.t:$(n)" value='-4' estimate='true' upper="0"/>
                </populationFunction>
                <tree idref="Tree.t:$(n)"/>
                <outbreak idref="outbreak"/>
            </distribution>

            <operator id='lhT50Scaler.t:$(n)' spec="ScaleOperator" scaleFactor="0.75" weight="3" parameter="@lhT50.t:$(n)"/>
            <operator id="lhGrowthRateScaler.t:$(n)" spec="ScaleOperator" scaleFactor="0.75" weight="3" parameter="@lhGrowthRate.t:$(n)"/>

            <prior id='lhRatioPrior.t:$(n)' x='@logistic.ratio.t:$(n)'>
                <distr spec="InverseGamma">
                    <parameter name="alpha" value='1' estimate="false"/>
                    <parameter name="beta" value='50' estimate="false"/>
                </distr>
            </prior>

            <prior id='lhT50Prior.t:$(n)' x='@minusT50.t:$(n)'>
                <distr spec="Gamma">
                    <parameter name="alpha" value='10' estimate="false"/>
                    <parameter name="beta" value='0.5' estimate="false"/>
                </distr>
            </prior>

            <Negative id="minusT50.t:$(n)" spec="beast.core.util.Negative">
                <arg idref="lhT50.t:$(n)"/>
            </Negative>
            <Sum id="logistic.ratio.t:$(n)" spec="beast.core.util.Sum">
                <CompoundValuable name="arg" spec="beast.core.parameter.CompoundValuable">
                    <var spec="parameter.RealParameter" value="1.0"/>
                    <ExponentialFunction name="var" spec="beast.core.util.ExponentialFunction">
                        <Product name="arg" spec="beast.core.util.Product">
                            <CompoundValuable name="arg" spec="beast.core.parameter.CompoundValuable">
                                <var idref="minusT50.t:$(n)"/>
                                <var idref="lhGrowthRate.t:$(n)"/>
                            </CompoundValuable>
                        </Product>
                    </ExponentialFunction>
                </CompoundValuable>
            </Sum>  

            <!-- default BH tree prior -->

            <distribution id="BHMIndSeir.t:$(n)" spec="beast.evolution.tree.partitioned.IndividualSEIR">
                <baseTransmissionRate id="baseTransRate.t:$(n)" spec="parameter.RealParameter" value="0.05" estimate="true"/>
                <initialInfectionTimePrior spec="beast.math.distributions.Normal">
                    <parameter estimate="false" name="mean">0</parameter>
                    <parameter estimate="false" name="sigma">4</parameter>
                </initialInfectionTimePrior>
                <tree idref="Tree.t:$(n)"/>
                <outbreak idref="outbreak"/>
                <latent spec="beastlier.durations.FixedValueDurationDistribution" id="latentCategory.t:$(n)">
                    <length spec="parameter.RealParameter" id="latentPeriod" value="0.001" estimate="true"/>
                </latent>
                <latentCategorySet spec="beastlier.outbreak.CategorySet" durationName="latentPeriod" outbreak="@outbreak">
                    <durationDistribution idref="latentCategory.t:$(n)"/>
                </latentCategorySet>
                <infectious spec="beastlier.durations.NormalHyperpriorDurationDistribution" id="infectiousCategory.t:$(n)">
                    <NormalGamma id="infectiousDist" spec="beast.math.distributions.NormalGamma">
                        <mu spec="parameter.RealParameter" value="10"/>
                        <lambda spec="parameter.RealParameter" value="0.01"/>
                        <alpha spec="parameter.RealParameter" value="1"/>
                        <beta spec="parameter.RealParameter" value="1"/>
                    </NormalGamma>
                </infectious>
                <infectiousCategorySet spec="beastlier.outbreak.CategorySet" durationName="infectiousPeriod" outbreak="@outbreak">
                    <durationDistribution idref="infectiousCategory.t:$(n)"/>
                </infectiousCategorySet>
            </distribution>

            <operator id='BaseRateScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter="@baseTransRate.t:$(n)"/>
            <prior id='BaseRatePrior.t:$(n)' x='@baseTransRate.t:$(n)'><distr spec="OneOnX"/></prior>

            <!-- Parameter operators -->
            
            <operator id='proportionInvariantScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@proportionInvariant.s:$(n)"/>
            <operator id='mutationRateScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@mutationRate.s:$(n)"/>
            <operator id='gammaShapeScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@gammaShape.s:$(n)"/>


            <!-- Multi-type tree operators -->

            <!-- Tree log -->
            <logger id="treelog.t:$(n)" logEvery="10000" fileName="$(filebase).$(tree).trees" mode="tree" log="@Tree.t:$(n)"/>

            <!-- Trace log elements -->
            <log id="treeHeight.t:$(n)" spec="beast.evolution.tree.TreeHeightLogger" tree="@Tree.t:$(n)"/>
]]>

			<connect method="beast.app.beauti.SiteModelInputEditor.customConnector"/>

            <connect srcID='WHCoalescentLogisticH2015.t:$(n)' targetID='prior' inputName='distribution' if="isInitializing"/>
            <connect srcID='BHMIndSeir.t:$(n)' targetID='prior' inputName='distribution' if="isInitializing"/>

            <connect srcID='Tree.t:$(n)' targetID='state' inputName='stateNode' if='inposterior(Tree.t:$(n))'/>
            <connect srcID='mutationRate.s:$(n)' targetID='state' inputName='stateNode' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='proportionInvariant.s:$(n)' targetID='state' inputName='stateNode' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>
            <connect srcID='mutationRate.s:$(n)' targetID='state' inputName='stateNode' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='gammaShape.s:$(n)' targetID='state' inputName='stateNode' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>
            <connect srcID='rateMatrix.t:$(n)' targetID='state' inputName='stateNode' if='inposterior(rateMatrix.t:$(n)) and rateMatrix.t:$(n)/estimate=true'/>
            <connect srcID='popSizes.t:$(n)' targetID='state' inputName='stateNode' if='inposterior(popSizes.t:$(n)) and popSizes.t:$(n)/estimate=true'/>

            <connect srcID='treeLikelihood.$(n)' targetID='likelihood' inputName='distribution' if="isInitializing"/>
            <connect srcID='structuredCoalescent.t:$(n)' targetID='prior' inputName='distribution' if="Tree.t:$(n)/estimate=true"/>
            <connect srcID='ClockPrior.c:$(n)'                targetID='prior' inputName='distribution' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>
            <connect srcID='MutationRatePrior.s:$(n)'         targetID='prior' inputName='distribution' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='GammaShapePrior.s:$(n)'           targetID='prior' inputName='distribution' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'>Prior on gamma shape for partition s:$(n)</connect>
            <connect srcID='PropInvariantPrior.s:$(n)'        targetID='prior' inputName='distribution' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'>Prior on proportion invariant for partition s:$(n)</connect>
            <connect srcID='rateMatrixPrior.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(rateMatrix.t:$(n)) and rateMatrix.t:$(n)/estimate=true'/>
            <connect srcID='popSizesPrior.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(popSizes.t:$(n)) and popSizes.t:$(n)/estimate=true'/>

            <connect srcID='proportionInvariantScaler.s:$(n)' targetID='mcmc' inputName='operator' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'>Scales proportion of invariant sites parameter of partition $(n)</connect>
            <connect srcID='mutationRateScaler.s:$(n)' targetID='mcmc' inputName='operator' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'>Scales mutation rate of partition s:$(n)</connect>
            <connect srcID='gammaShapeScaler.s:$(n)' targetID='mcmc' inputName='operator' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'>Scales gamma shape parameter of partition s:$(n)</connect>
            <connect srcID='rateMatrixScaler.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(rateMatrix.t:$(n)) and rateMatrix.t:$(n)/estimate=true'/>
            <connect srcID='popSizesScaler.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(popSizes.t:$(n)) and popSizes.t:$(n)/estimate=true'/>
            <connect srcID='STX.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='TWB.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='NR.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='NSR1.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='NSR2.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='MTU.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='MTTS.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='MTTUpDown.t:$(n)' targetID='mcmc' inputName='operator' if='Tree.t:$(n)/estimate=true'/>
            <connect srcID='popSizes.t:$(n)' targetID='MTTUpDown.t:$(n)' inputName='parameter' if='Tree.t:$(n)/estimate=true and popSizes.t:$(n)/estimate=true'/>
            <connect srcID='rateMatrix.t:$(n)' targetID='MTTUpDown.t:$(n)' inputName='parameterInverse' if='Tree.t:$(n)/estimate=true and rateMatrix.t:$(n)/estimate=true'/>

            <connect srcID='treelog.t:$(n)' targetID='mcmc' inputName='logger' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='maptreelog.t:$(n)' targetID='mcmc' inputName='logger' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='typednodetreelog.t:$(n)' targetID='mcmc' inputName='logger' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>

            <connect srcID='treeLikelihood.$(n)' targetID='tracelog' inputName='log' if='inlikelihood(treeLikelihood.$(n))'/>
            <connect srcID='TreeHeight.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(Tree.t:$(n))'/>
            <connect srcID='proportionInvariant.s:$(n)' targetID='tracelog' inputName='log' if='inposterior(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>
            <connect srcID='mutationRate.s:$(n)' targetID='tracelog' inputName='log' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='gammaShape.s:$(n)' targetID='tracelog' inputName='log' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>
            <connect srcID='clockRate.c:$(n)' targetID='tracelog' inputName='log' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>

            <connect srcID='migModelLogger.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(migModel.t:$(n))'/>
            <connect srcID='treeHeight.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='treeLength.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='typeLengths.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='changeCounts.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='totalChangecounts.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='nodeTypeCounts.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='rootTypeLogger.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>

        </partitiontemplate>
        <mergepoint id='withinHostTreePriorTemplates'/>
        <mergepoint id='betweenHostTreePriorTemplates'/>
        <mergepoint id='substModelTemplates'/>
		<mergepoint id='clockModelTemplates'/>
        <mergepoint id='parametricDistributions'/>
    </beauticonfig>


<!-- framework for main model -->

    <run spec="MCMC" id="mcmc" chainLength="10000000">

        <state storeEvery='5000' id='state'></state>

        <distribution spec="CompoundDistribution" id="posterior">
            <distribution spec="CompoundDistribution" id="prior"/>
            <distribution spec="CompoundDistribution" id="likelihood"/>
        </distribution>

        <logger id='tracelog' logEvery="1000" fileName="$(filebase).log">
            <log idref="posterior"/>
            <log idref="likelihood"/>
            <log idref="prior"/>
        </logger>

        <logger id='screenlog' logEvery="1000">
	        <!--model idref='posterior'/-->
            <log idref="posterior"/>
      	    <ESS spec='ESS' name='log' arg="@posterior"/>
            <log idref="likelihood"/>
            <log idref="prior"/>
        </logger>
    </run>

</beast>

